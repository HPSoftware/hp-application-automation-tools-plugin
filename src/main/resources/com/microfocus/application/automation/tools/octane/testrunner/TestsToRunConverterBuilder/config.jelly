<!--
  ~
  ~  Certain versions of software and/or documents (“Material”) accessible here may contain branding from
  ~  Hewlett-Packard Company (now HP Inc.) and Hewlett Packard Enterprise Company.  As of September 1, 2017,
  ~  the Material is now offered by Micro Focus, a separately owned and operated company.  Any reference to the HP
  ~  and Hewlett Packard Enterprise/HPE marks is historical in nature, and the HP and Hewlett Packard Enterprise/HPE
  ~  marks are the property of their respective owners.
  ~ __________________________________________________________________
  ~ MIT License
  ~
  ~ © Copyright 2012-2019 Micro Focus or one of its affiliates..
  ~
  ~ The only warranties for products and services of Micro Focus and its affiliates
  ~ and licensors (“Micro Focus”) are set forth in the express warranty statements
  ~ accompanying such products and services. Nothing herein should be construed as
  ~ constituting an additional warranty. Micro Focus shall not be liable for technical
  ~ or editorial errors or omissions contained herein.
  ~ The information contained herein is subject to change without notice.
  ~ ___________________________________________________________________
  ~
  -->

<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:f="/lib/form">
    <f:entry title="Testing framework" field="framework">
        <select name="teststorunconverter.framework" onchange="selectionChanged(this)">
             <j:forEach var="myFramework" items="${descriptor.Frameworks}">
                  <f:option selected="${myFramework.name == instance.testsToRunConverterModel.framework.name}" value="${myFramework.name}">
                        ${myFramework.description}
                  </f:option>
             </j:forEach>
        </select>
    </f:entry>

    <j:forEach var="myFramework" items="${descriptor.Frameworks}">
        <f:textbox id="format+${myFramework.name}" value="${myFramework.format}" hidden="hidden"/>
    </j:forEach>
    <f:entry title="Custom configuration" field="format">
        <textarea id="format" name="teststorunconverter.format" type="text" class="setting-input" style="resize: vertical; min-height:90px;">
            ${instance.testsToRunConverterModel.framework.format}
        </textarea>
        <select id="fillFormat" onchange="insertFormat(this)" style="float: right;position: relative;font-size: smaller;">
                 <f:option value="title">Fill configuration ...</f:option>
                 <f:option value="basic">Minimal configuration</f:option>
                 <f:option value="extended">Extended configuration</f:option>
         </select>
    </f:entry>

    <f:advanced>
    <f:section title="Test conversion"/>
    <f:entry title="Tests to run" description="Tests to run in raw format, for example : v1:package1|className1|testName1;package2|className2|testName2">
      <f:textbox field="testsToRun" />
    </f:entry>
            <f:validateButton title="Convert" progress="Evaluating..."
                    method="testConvert" with="teststorunconverter.framework,teststorunconverter.format,testsToRun"/>
    </f:advanced>

    <script>
        init();
        function init(){
            var isCustom=${instance.isCustom};
            enableElements(isCustom);
        }
        function insertFormat(sender){
            var index = sender.selectedIndex;
            var options = sender.options;
            var txtFormat = document.getElementById('format');

            if(options[index].value === 'basic'){
                txtFormat.value = "{\n\t\"testPattern\": \"&#036;package.$class#$testName\",\n\t\"testDelimiter\": \",\"\n}";
            }
            else if(options[index].value === 'extended'){

                var config = {
                    testPattern :"&#36;package.$class#$testName",
                    testDelimiter:"",
                    prefix:"",
                    suffix:"",
                    replacements:[
                    {   type: "replaceString",
                        target: "$package|$class|$testName",
                       "string": "aaa",
                       "replacement": "bbb"
                       }]
                }

                var str = JSON.stringify(config, null,"\t");//pretty format

                console.log(str);
                //txtFormat.value = str.replace("\",\"","\",\n\t\"").replace("{","{\n\t").replace("}","\n}");
                //txtFormat.value = str.replace(/\",\"/g,"\",\n\t\"").replace(/{/g,"{\n\t").replace(/}/g,"\n}");

                txtFormat.value = str;

            }
            sender.selectedIndex = 0;
        }

        function selectionChanged(sender) {
            var x = sender.selectedIndex;
            var y = sender.options;
            var bCustom = y[x].value === 'custom' ? true : false;
            enableElements(bCustom);
            var optionFormat = document.getElementById('format+' + y[x].value);
            var txtFormat = document.getElementById('format');
            txtFormat.value = optionFormat ? optionFormat.value : "";
        }

        function enableElements(isCustom){
            console.log("enableElements " + isCustom);
            var txtFormat = document.getElementById('format');
            var fillFormat = document.getElementById('fillFormat');
            txtFormat.disabled = !isCustom;
            fillFormat.style.visibility = isCustom ? "visible" : "hidden";
        }

    </script>

</j:jelly>